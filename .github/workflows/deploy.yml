name: Build, Test and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14.2
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd="pg_isready -U user -d testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Wait for PostgreSQL to be ready
        run: |
          until docker exec $(docker ps -qf "ancestor=postgres:14.2") pg_isready -U user -d testdb; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Build and Test with Maven
        run: mvn clean test -X -Dspring.profiles.active=test

      - name: Log in to Docker Hub
        if: success()
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate Docker image tag
        if: success()
        id: image_tag
        run: |
          TAG="v$(date +'%Y%m%d%H%M%S')"
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Build Docker image
        if: success()
        run: |
          docker build -t balalaika7771/hahaloh-back:${{ env.TAG }} .
          docker tag balalaika7771/hahaloh-back:${{ env.TAG }} balalaika7771/hahaloh-back:latest

      - name: Push Docker image with version tag
        if: success()
        run: |
          docker push balalaika7771/hahaloh-back:${{ env.TAG }}
          docker push balalaika7771/hahaloh-back:latest

      - name: Send success message to Telegram
        if: success()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          IMAGE_TAG: ${{ env.TAG }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
          -d chat_id="${TELEGRAM_CHAT_ID}" \
          -d text="Образ бэка версии $IMAGE_TAG успешно загружен в Docker Hub"

      - name: Send failure message to Telegram
        if: failure()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
          -d chat_id="${TELEGRAM_CHAT_ID}" \
          -d text="Сборка не прошла успешно. Проверьте тесты и исправьте ошибки перед загрузкой образа."
